/*
 * Source code from iPlaylist Copier is (C) Jason Baker 2006
 * 
 * Please make an effort to document your additions to this source code file,
 * so future developers can give you credit where due.
 * 
 * Please include this copyright information in these source files when
 * redistributing source code. 
 *
 * Please make note of this copyright information in documentation for
 * binary redistributions that contain any or all of the source code. 
 *
 * If you are having any trouble understanding the meaning of this code
 * email jason directly at jason@onejasonforsale.com.
 *
 * Thanks, and happy coding!
 */

/*
 * NewJFrame.java
 *
 * Created on September 13, 2006, 10:18 AM
 */

package Com.WorldsWorstSoftware.iPlaylistCopier.GUI;

import Com.WorldsWorstSoftware.ItunesLibrary.Util.LibraryFinder;
import Com.WorldsWorstSoftware.iPlaylistCopier.CLI.*;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/**
 *
 * @author  jasbaker
 */
public class GraphicalUserInterface extends javax.swing.JFrame implements IProgressHelper
{
    private GUIViewModel viewModel = null;
    private ParserThread _parserThread = null;
    private CopierThread _copierThread = null;
    private boolean _errorsOccurred = false;
    private StringBuffer _copyErrors = null;
    
    private void UpdateConfiguration()
    {
        if (viewModel != null)
        {
            //library location
            this.LibraryLocationLabel.setText(viewModel.getLibraryLocation());
            
            //playlist
            this.ConfigurePlayListList();
            
            //track name format
            this.TrackNameFormatTextBox.setText(viewModel.getTrackNameFormat());
            this.ExampleTrackNameLabel.setText(viewModel.getExampleTrackName());
            
            //track list
            this.TrackListList.setEnabled(viewModel.PlaylistSelected());
            
            //TODO: don't ALWAYS do this
            this.TrackListList.setListData(viewModel.getTracks());
            
            //copy files button
            this.CopyFilesButton.setEnabled(viewModel.PlaylistSelected());
        }
    }
    
    private void ConfigurePlayListList()
    {
        this.PlaylistList.setEnabled(viewModel.LibrarySelected());
        
        if (viewModel.LibrarySelected() == false ||
                viewModel.PlaylistSelected() == false)
        {
            this.PlaylistList.removeAllItems();
            PlaylistItem[] playlists = viewModel.getPlaylists();
            for (int i = 0; i < playlists.length; i++)
            {
                this.PlaylistList.addItem(playlists[i]);
            }
            this.PlaylistList.setSelectedIndex(0);
        }
    }
    
    /** Creates new form NewJFrame */
    public GraphicalUserInterface()
    {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        LibraryParseDialog = new javax.swing.JDialog();
        LibraryParseCancelButton = new javax.swing.JButton();
        LibraryParsingLabel = new javax.swing.JLabel();
        AboutDialog = new javax.swing.JDialog();
        OKButton = new javax.swing.JButton();
        WWSLinkLabel = new javax.swing.JLabel();
        VersionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        FileCopyDialog = new javax.swing.JDialog();
        FileCopyLabel = new javax.swing.JLabel();
        FileCopyCancelButton = new javax.swing.JButton();
        FileCopyErrorsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        FileCopierErrorsTextBox = new javax.swing.JTextPane();
        LibraryLocationPanel = new javax.swing.JPanel();
        LibraryLocationLabel = new javax.swing.JLabel();
        LibraryBrowseButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        PlaylistList = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TrackListList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        TrackNameFormatTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        ExampleTrackNameLabel = new javax.swing.JLabel();
        CopyFilesButton = new javax.swing.JButton();
        AboutButton = new javax.swing.JButton();

        LibraryParseDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        LibraryParseDialog.setTitle("Reading Library");
        LibraryParseDialog.setModal(true);
        LibraryParseDialog.setResizable(false);
        LibraryParseCancelButton.setText("Cancel");
        LibraryParseCancelButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                LibraryParseCancelButtonMouseClicked(evt);
            }
        });

        LibraryParsingLabel.setText("jLabel2");

        org.jdesktop.layout.GroupLayout LibraryParseDialogLayout = new org.jdesktop.layout.GroupLayout(LibraryParseDialog.getContentPane());
        LibraryParseDialog.getContentPane().setLayout(LibraryParseDialogLayout);
        LibraryParseDialogLayout.setHorizontalGroup(
            LibraryParseDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LibraryParseDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(LibraryParsingLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 259, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(LibraryParseCancelButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LibraryParseDialogLayout.setVerticalGroup(
            LibraryParseDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LibraryParseDialogLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(LibraryParseDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(LibraryParsingLabel)
                    .add(LibraryParseCancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AboutDialog.setTitle("About iPlaylist Copier");
        AboutDialog.setModal(true);
        AboutDialog.setResizable(false);
        OKButton.setText("OK");
        OKButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                OKButtonMouseClicked(evt);
            }
        });

        WWSLinkLabel.setForeground(new java.awt.Color(51, 51, 255));
        WWSLinkLabel.setText("http://www.worldsworstsoftware.com");
        WWSLinkLabel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                WWSLinkLabelMouseClicked(evt);
            }
        });

        VersionLabel.setText("iPlaylist Copier v X.xx");

        jTextPane2.setText("[AUTHOR]\nWritten by Jason Baker.\n\n[REPORTING BUGS]\nReport bugs to jason@onejasonforsale.com.\n\n[COPYRIGHT]\nCopyright (c) 2006, Jason Baker\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without  modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of the World's Worst Software nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOTLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n[DISCLAIMER]\nJason Baker, World's Worst Software, and iPlaylist Copier are not affiliated with or endorsed by Apple Computer in any way.\n\n[FUTURE REVISIONS]\nFuture revisions of iPlaylist Copier can be obtained from http://www.worldsworstsoftware.com\n\n");
        jScrollPane2.setViewportView(jTextPane2);

        org.jdesktop.layout.GroupLayout AboutDialogLayout = new org.jdesktop.layout.GroupLayout(AboutDialog.getContentPane());
        AboutDialog.getContentPane().setLayout(AboutDialogLayout);
        AboutDialogLayout.setHorizontalGroup(
            AboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(AboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .add(AboutDialogLayout.createSequentialGroup()
                        .add(WWSLinkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 298, Short.MAX_VALUE)
                        .add(OKButton))
                    .add(VersionLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE))
                .addContainerGap())
        );
        AboutDialogLayout.setVerticalGroup(
            AboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, AboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(VersionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(OKButton)
                    .add(WWSLinkLabel))
                .addContainerGap())
        );
        FileCopyDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        FileCopyDialog.setTitle("Copying Files");
        FileCopyDialog.setModal(true);
        FileCopyLabel.setText("jLabel1");

        FileCopyCancelButton.setText("Cancel");
        FileCopyCancelButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                FileCopyCancelButtonMouseClicked(evt);
            }
        });

        FileCopyErrorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Errors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText));
        FileCopierErrorsTextBox.setEditable(false);
        jScrollPane3.setViewportView(FileCopierErrorsTextBox);

        org.jdesktop.layout.GroupLayout FileCopyErrorsPanelLayout = new org.jdesktop.layout.GroupLayout(FileCopyErrorsPanel);
        FileCopyErrorsPanel.setLayout(FileCopyErrorsPanelLayout);
        FileCopyErrorsPanelLayout.setHorizontalGroup(
            FileCopyErrorsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FileCopyErrorsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );
        FileCopyErrorsPanelLayout.setVerticalGroup(
            FileCopyErrorsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FileCopyErrorsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout FileCopyDialogLayout = new org.jdesktop.layout.GroupLayout(FileCopyDialog.getContentPane());
        FileCopyDialog.getContentPane().setLayout(FileCopyDialogLayout);
        FileCopyDialogLayout.setHorizontalGroup(
            FileCopyDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FileCopyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(FileCopyDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, FileCopyErrorsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(FileCopyDialogLayout.createSequentialGroup()
                        .add(FileCopyLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(FileCopyCancelButton)))
                .addContainerGap())
        );
        FileCopyDialogLayout.setVerticalGroup(
            FileCopyDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FileCopyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(FileCopyDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(FileCopyCancelButton)
                    .add(FileCopyLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(FileCopyErrorsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iPlaylist Copier");
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowActivated(java.awt.event.WindowEvent evt)
            {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        getAccessibleContext().setAccessibleName("asdasd");
        getAccessibleContext().setAccessibleDescription("asdasd");
        LibraryLocationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Itunes Library Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText));
        LibraryLocationLabel.setFont(new java.awt.Font("Tahoma", 0, 12));
        LibraryLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LibraryLocationLabel.setText("jLabel1");

        LibraryBrowseButton.setText("Browse");
        LibraryBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbutton_clicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout LibraryLocationPanelLayout = new org.jdesktop.layout.GroupLayout(LibraryLocationPanel);
        LibraryLocationPanel.setLayout(LibraryLocationPanelLayout);
        LibraryLocationPanelLayout.setHorizontalGroup(
            LibraryLocationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, LibraryLocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(LibraryLocationLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 373, Short.MAX_VALUE)
                .add(LibraryBrowseButton)
                .addContainerGap())
        );
        LibraryLocationPanelLayout.setVerticalGroup(
            LibraryLocationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LibraryLocationPanelLayout.createSequentialGroup()
                .add(LibraryLocationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(LibraryBrowseButton)
                    .add(LibraryLocationLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Playlist", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText));
        PlaylistList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PlaylistList.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                PlaylistListActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(PlaylistList, 0, 478, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(PlaylistList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tracks In Playlist", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText));
        TrackListList.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(TrackListList);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Track Name Format", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), javax.swing.UIManager.getDefaults().getColor("windowText")));
        TrackNameFormatTextBox.setText("jTextField1");
        TrackNameFormatTextBox.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                TrackNameFormatTextBoxKeyReleased(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("%# = Track Number  %N = Track Name  %A = Artist  %# = Album");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Example Track File Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.SystemColor.windowText));
        ExampleTrackNameLabel.setText("jLabel4");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(ExampleTrackNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(ExampleTrackNameLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, TrackNameFormatTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(TrackNameFormatTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CopyFilesButton.setText("Copy Files");
        CopyFilesButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                CopyFilesButtonMouseClicked(evt);
            }
        });

        AboutButton.setText("About");
        AboutButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                AboutButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(LibraryLocationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(AboutButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 372, Short.MAX_VALUE)
                        .add(CopyFilesButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(LibraryLocationPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AboutButton)
                    .add(CopyFilesButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
    {//GEN-HEADEREND:event_formWindowActivated
        if (LibraryParseDialog.isVisible())
        {
            LibraryParseDialog.show();
        }
        else if (FileCopyDialog.isVisible())
        {
            FileCopyDialog.show();
        }
        else if (AboutDialog.isVisible())
        {
            AboutDialog.show();
        }
                
    }//GEN-LAST:event_formWindowActivated

    private void FileCopyCancelButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_FileCopyCancelButtonMouseClicked
    {//GEN-HEADEREND:event_FileCopyCancelButtonMouseClicked
        if (this._copierThread != null)
        {
            this._copierThread.interrupt();            
            this._copierThread = null;
            this._copyErrors.append("File copy canceled by user.");
            this.FileCopierErrorsTextBox.setText(this._copyErrors.toString());                        
            this.FileCopyLabel.setText("File Copy Canceled");
            this.FileCopyCancelButton.setText("OK");
            return;
        }        
        this.FileCopyDialog.setVisible(false);
        this.UpdateConfiguration();
    }//GEN-LAST:event_FileCopyCancelButtonMouseClicked
    
    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        
        //resize the location label since it's not "auto horizontal resizable"
        int width = this.LibraryLocationPanel.getWidth() - this.LibraryBrowseButton.getWidth();
        int space = this.LibraryParsingLabel.getLocation().x + this.LibraryLocationPanel.getWidth();
        space -= (this.LibraryBrowseButton.getLocation().x + this.LibraryBrowseButton.getWidth());
        width -= (space * 3);
        this.LibraryLocationLabel.setSize(width, this.LibraryLocationLabel.getHeight());
        this.LibraryLocationLabel.setMinimumSize(new Dimension(width, this.LibraryLocationLabel.getHeight()));
        this.LibraryLocationLabel.setMaximumSize(new Dimension(width, this.LibraryLocationLabel.getHeight()));
        this.LibraryLocationLabel.setPreferredSize(new Dimension(width, this.LibraryLocationLabel.getHeight()));
        this.UpdateConfiguration();
    }//GEN-LAST:event_formComponentResized
    
    private void LibraryParseCancelButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_LibraryParseCancelButtonMouseClicked
    {//GEN-HEADEREND:event_LibraryParseCancelButtonMouseClicked
        if (this._parserThread != null)
        {
            this._parserThread.interrupt();
        }
        this._parserThread = null;
        this.LibraryParseDialog.setVisible(false);
        this.UpdateConfiguration();
    }//GEN-LAST:event_LibraryParseCancelButtonMouseClicked
    
    private void CopyFilesButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CopyFilesButtonMouseClicked
    {//GEN-HEADEREND:event_CopyFilesButtonMouseClicked
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose Your Output Folder");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
        {
            return;
        }
        
        String filePath = fc.getSelectedFile().getAbsolutePath();
        
        String message = null;
        File directory = new File(filePath);
        
        if (directory.exists() == false)
        {
            message = "Directory does not exist.";
        }
        
        if (directory.canWrite() == false)
        {
            message = "Cannot write to directory, check permissions.";
        }
        
        if (message != null)
        {
            new JOptionPane().showMessageDialog(this, message, "Invalid Output Folder Selection", JOptionPane.OK_OPTION);
            return;
        }   
        
        this.FileCopierErrorsTextBox.removeAll();        
        this._copyErrors = new StringBuffer();
        this._errorsOccurred = false;
        
        this._copierThread = new CopierThread(viewModel.getPlaylist(), viewModel.getTrackNameFormat(), filePath, this);
        //start the thread
        this._copierThread.start();
        
        
        this.FileCopyCancelButton.setText("Cancel");                
        
        this.FileCopyDialog.setSize(600, 400);                
        this.FileCopyLabel.setText("Copying Files..");        
        
        this.FileCopyDialog.setVisible(true);                                                        
    }//GEN-LAST:event_CopyFilesButtonMouseClicked
    
    private void PlaylistListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PlaylistListActionPerformed
    {//GEN-HEADEREND:event_PlaylistListActionPerformed
        Object item = this.PlaylistList.getSelectedItem();
        if (item instanceof PlaylistItem)
        {
            viewModel.setPlaylist((PlaylistItem) item);
            this.UpdateConfiguration();
        }
    }//GEN-LAST:event_PlaylistListActionPerformed
    
    private void TrackNameFormatTextBoxKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TrackNameFormatTextBoxKeyReleased
    {//GEN-HEADEREND:event_TrackNameFormatTextBoxKeyReleased
        viewModel.setTrackNameFormat(TrackNameFormatTextBox.getText());
        this.UpdateConfiguration();
    }//GEN-LAST:event_TrackNameFormatTextBoxKeyReleased
        
    private void AboutButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_AboutButtonMouseClicked
    {//GEN-HEADEREND:event_AboutButtonMouseClicked
        this.VersionLabel.setText(ArgParser.getVersion());        
        this.AboutDialog.setSize(600, 400);
        this.AboutDialog.setVisible(true);
    }//GEN-LAST:event_AboutButtonMouseClicked
    
    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        
        this.viewModel = new GUIViewModel();
        this.UpdateConfiguration();
        
        //try to auto detect the library file
        LibraryFinder libraryFinder = new LibraryFinder(System.out, false);
        this.setLibraryLocation(libraryFinder.FindLibrary());
    }//GEN-LAST:event_formWindowOpened
    
    private void OKButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_OKButtonMouseClicked
    {//GEN-HEADEREND:event_OKButtonMouseClicked
        this.AboutDialog.setVisible(false);
    }//GEN-LAST:event_OKButtonMouseClicked
    
    private void WWSLinkLabelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_WWSLinkLabelMouseClicked
    {//GEN-HEADEREND:event_WWSLinkLabelMouseClicked
        BareBonesBrowserLaunch.openURL("http://www.worldsworstsoftware.com/");
    }//GEN-LAST:event_WWSLinkLabelMouseClicked
    
    private void jbutton_clicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbutton_clicked
    {//GEN-HEADEREND:event_jbutton_clicked
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Locate Your iTunes Library");
        fc.setFileFilter(new XMLFileFilter());
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
        {
            return;
        }
        String filePath = fc.getSelectedFile().getAbsolutePath();
        
        if (this.setLibraryLocation(filePath) == false)
        {
            //setting library didnt work, show a dialog about the file not being a valid itunes library
            String message = "The selected file is not a valid iTunes Library.";
            new JOptionPane().showMessageDialog(this, message, "Invalid Library Selection", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jbutton_clicked
    
    private boolean setLibraryLocation(String libraryLocation)
    {
        if (viewModel.setLibraryLocation(libraryLocation))
        {
            this._errorsOccurred = false;   
            
            //the library location is good to go, start parsing it..
            this._parserThread = new ParserThread(libraryLocation, this);           
            //start processing
            this._parserThread.start();
            
            //show the parsing progress dialog
            this.LibraryParseDialog.setSize(400, 80);
            int x = this.getLocation().x + ((this.getWidth() - this.LibraryParseDialog.getWidth()) / 2);
            int y = this.getLocation().y + ((this.getHeight() - this.LibraryParseDialog.getHeight()) / 2);
            this.LibraryParseDialog.setLocation(x, y);
            this.LibraryParsingLabel.setText("Reading Library..");
            this.LibraryParseDialog.setVisible(true);
            
            
            
            return true;
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GraphicalUserInterface().setVisible(true);
            }
        });
    }
    
    public void updateStatus(String statusUpdate)
    {
        if (this._parserThread != null)
        {
            //we are parsing the library, update the parse status..
            this.LibraryParsingLabel.setText(statusUpdate);
        }
        else if (this._copierThread != null)
        {
            this.FileCopyLabel.setText(statusUpdate);            
        }
    }
    
    public void updateError(String error)
    {
        _errorsOccurred = true;
        if (this._copierThread != null)
        {   
            this._copyErrors.append(error);            
        }
    }
    
    public void finishTask()
    {
        if (this._parserThread != null)
        {
            //we are done parsing the library
            this.viewModel.setLibrary(this._parserThread.getLibrary());
            this._parserThread = null;
            this.LibraryParseDialog.setVisible(false);
            UpdateConfiguration();
        }
        if (this._copierThread != null)
        {
            this._copierThread = null;
            this.FileCopyLabel.setText("File Copy Finished");
            this.FileCopyCancelButton.setText("Ok");
            if (this._copyErrors.length() > 0)
            {
                this.FileCopierErrorsTextBox.setText(this._copyErrors.toString());            
            }
            
            if (_errorsOccurred == false)            
            {                
                this.FileCopierErrorsTextBox.setText("No Errors Occurred");
            }
            UpdateConfiguration();
        }
    
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AboutButton;
    private javax.swing.JDialog AboutDialog;
    private javax.swing.JButton CopyFilesButton;
    private javax.swing.JLabel ExampleTrackNameLabel;
    private javax.swing.JTextPane FileCopierErrorsTextBox;
    private javax.swing.JButton FileCopyCancelButton;
    private javax.swing.JDialog FileCopyDialog;
    private javax.swing.JPanel FileCopyErrorsPanel;
    private javax.swing.JLabel FileCopyLabel;
    private javax.swing.JButton LibraryBrowseButton;
    private javax.swing.JLabel LibraryLocationLabel;
    private javax.swing.JPanel LibraryLocationPanel;
    private javax.swing.JButton LibraryParseCancelButton;
    private javax.swing.JDialog LibraryParseDialog;
    private javax.swing.JLabel LibraryParsingLabel;
    private javax.swing.JButton OKButton;
    private javax.swing.JComboBox PlaylistList;
    private javax.swing.JList TrackListList;
    private javax.swing.JTextField TrackNameFormatTextBox;
    private javax.swing.JLabel VersionLabel;
    private javax.swing.JLabel WWSLinkLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
    
}
